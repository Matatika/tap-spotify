### A CI workflow template that runs linting and python testing
### TODO: Modify as needed or as desired.

name: Test tap-spotify

on:
  push:
    branches: [master]
    paths-ignore: [README.md]
  pull_request:
    paths-ignore: [README.md]
  schedule:
  - cron: 0 9 * * *

jobs:
  pytest:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      TAP_SPOTIFY_CLIENT_ID: ${{secrets.TAP_SPOTIFY_CLIENT_ID}}
      TAP_SPOTIFY_CLIENT_SECRET: ${{secrets.TAP_SPOTIFY_CLIENT_SECRET}}
      TAP_SPOTIFY_REFRESH_TOKEN: ${{secrets.TAP_SPOTIFY_REFRESH_TOKEN}}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        pip install poetry
    - name: Install dependencies
      run: |
        poetry env use ${{ matrix.python-version }}
        poetry install
    - name: Test with pytest
      run: |
        __generate_annotations () {
          level=$1
          pattern=$2
          title=${3:-'\1'}
          message=${4:-'\0'}

          test -z "$level" \
            && echo 'Error: level is required' \
            && exit 1

          test "$level" != debug \
            && test "$level" != notice \
            && test "$level" != warning \
            && test "$level" != error \
            && echo 'Error: level must be one of [ debug | notice | warning | error ]' \
            && exit 1

          test -z "$pattern" \
            && echo 'Error: pattern is required' \
            && exit 1

          sed -E "s/.*($pattern)/::$level title=${{ github.job }} (${{ matrix.python-version }}): $title::$message/"
        }

        debug () { __generate_annotations $FUNCNAME "$@"; }
        notice () { __generate_annotations $FUNCNAME "$@"; }
        warning () { __generate_annotations $FUNCNAME "$@"; }
        error () { __generate_annotations $FUNCNAME "$@"; }

        poetry run pytest | warning UserWarning
